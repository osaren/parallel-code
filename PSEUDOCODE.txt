
ADD psuedocode here guys :)


Q1

INT FISH
FOR (i=0;i<10;i++){
carry out chosen commands;
}

Q2

INT FISH
INT SHARK
IF (sharks >= 5){
fish dies;
}


// int *current represents a cell
// current = -10;
// each cell has an int
// the value represents the state of each cell
// Negative numbers represent a shark in a cell

// *neighbours represent the neighbours of thr current cell
// neighbors = [-2, -7, -19, 0, -5, -10, 0, -2];
// neighbors[0] -> -2(shark)
// neighbors[1] -> -7(shark)
// neighbors[2] -> -19(shark)
// neighbors[3] -> 0(empty)
// neighbors[4] -> -5(shark)
// neighbors[5] -> -10(shark)
// neighbors[6] -> 0(empty)
// neighbors[7] -> -2(shark)

// Declaring variables at the top of main()
int currentGeneration = 0;
int targetGenerations = 20000;
int oceanRowSize = 10000;
int oceanColumnSize = 10000;
int ocean[oceanRowSize][oceanColumnSize];

generateInitialData(ocean, oceanRowSize, oceanColumnSize);

// Outter-most for loop processes each generation
for (int i = 0; i < targetGenerations; i++){

    // These 2 for loops walk over the cells in grid (ocean)
    for (int row = 0; row < oceanRowSize; row++) {
      for (int column = 0; column < oceanColumnSize; column++) {

        int current = ocean[row][column];

        // TODO
        // Get neighboring cells and their values
        // and put into a neighbor array
        // new function, to get all the neighbours, relative to current
        // Example,
        // int[] neighbours = getNeighbours();

        // process rules on current cell
        if (current <= -1) {
          // process shark rules

          // Declare variables
          // These variables will count how many neighbors are fish/sharks

          int sharkNeighbors = 0;
          int fishNeighbors = 0;

	  // Loop over the neighbors array 
          // so we can count how many neighbors are sharks/fish

          for(int j = 0; j < 8; j++){

            // if neighbour is shark
            if neighbors[j] <= -1) { // neighbour is shark
              sharkNeighbours++;
            } else if (neighbours [j] >= 1 { // neighbour is fish
              fishNeighbours ++;
            }
          }
          // sharkNeighbours = 6
          // fishNeighbours = 0

          if(current <= -20) { // if shark is older than -20
            current = 0 // kills the shark, due to age
          } else if (sharkNeighbours >= 6 && fishNeighbours == 0){
            current = 0;// kills the shark, due to starvation
          }


        } else if(current >= 1){// this is a fish
          // process fish rules
        } else if(current == 0) {// this is empty
          // process breeding rules
        }
      }
    }
 }




//////////////////////////////////////

void generateInitialData(int *pointerToOcean, int oceanRowSize, int oceanColumnSize) {

  for (int row = 0; row < oceanRowSize; row++) {

    for (int col = 0; col < oceanColumnSize; col++) {

      // generate a random number between -20 and 20
      int scale = rand() / RAND_MAX;
      int randomNumber = 0 + scale * (20 - 0);

      // TODO
      // some logic to make half of these random numbers negative

      pointerToOcean[row][col] = randomNumber;
    }
  }
}

///////////////////////////////////////////

 
 Dylan 
 
 //Shark has a 1/32(0.031) chance of dying randomly. Use a random number to see if the shark survives.

int randNumber

if(randNumber >0.031)
{
	shark dies;
} 

//if statement checks to see if the shark is alive, then adds to its age

int sharkAge
bool isAlive

if(shark isAlive) 
{
	sharkAge++;
}



-------------- mark --------------

- If(at most 5 neighbours are sharks){ 
	the fish dies; 
	becoming food for shark( fish = dead; dead = food; sharkEat = eat(food); )
}

- If (all 8 Neighbors = fish){ 
	fish must die because of overpopulation;
}

- If (fish != dead){ 
	increment its age (age++)
}

-------------- mark --------------


---- breeding rule

//current cell is empty

int current = 0;

// fish age is 1 at birth
// sharks age is -1 at birth

int fishBreedingAge = 2;
int sharkBreedingAge = 3;

int fishNeighbours;
int sharkNeighbours;

int fish;
int shark;


if(current == 0){

	if((sharkNeighbours >= 4 && breedingAge >= 3) && (sharkNeighbours < fishNeighbours)){
	
		shark = -1;
	}
	
	if((fishNeighbours >= 4 && breedingAge >= 2) && (sharkNeighbours < fishNeighbours)){
	
		fish = 1;
	}
}

---- fish rules

if(sharkNeighbours <= 5){
	// fish becomes current cell
	// shark eats the fish in that current cell?

	fish = current;
	shark = fish;
}

if(fishNeighbours = 8){
	// overpopulation
	
	current = 0; 
}

if(fish != 0){
	fish += 1;
}
